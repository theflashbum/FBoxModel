package com.flashartofwar.boxmodel.display {	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Graphics;	import flash.display.Sprite;	import flash.errors.IllegalOperationError;	import flash.geom.Point;	import flash.utils.Dictionary;	public class AbstractDisplay extends AncestorSprite implements IDisplay	{				protected var display:Sprite;		protected var registeredListeners:Dictionary = new Dictionary();		/**		 * @author jessefreeman		 * @author Justin Akin		 */		public function AbstractDisplay( self:AbstractDisplay )		{					if( self != this )				throw new IllegalOperationError( "AbstractDisplay cannot be instantiated directly." );			else				addDisplay();		}			//--------------------------------------------------------------------------------	//	// Public Getters and Setters	//	//--------------------------------------------------------------------------------			/**		 * Creates a snapshot of the display object.		 * 		 * @return BitmapData		 */				public function get bitmapData():BitmapData		{			var bitmapData:BitmapData = new BitmapData( width, height, true );						bitmapData.draw( this );						return bitmapData;		}				/**		 * The center point of the display object.		 * 		 * @return Point		 */				public function get center():Point		{			return new Point( x + ( width / 2 ), y + ( height / 2 ) );		}				/**		 * @private		 */				public function set center( point:Point ):void		{			 x = point.x - ( width / 2 );			 y = point.y - ( height / 2 );		}				/**		 * @inheritDoc		 */				override public function get graphics():Graphics		{			return display.graphics;		}				/**		 * @inheritDoc		 */				override public function get numChildren():int		{			return display.numChildren;		}				/**		 * @inheritDoc		 */				override public function get parent():DisplayObjectContainer		{			if( super.parent ) return super.parent.name == "display" ? super.parent.parent : super.parent;						return super.parent;		}				/**		 * @inheritDoc		 */				override public function get tabChildren():Boolean		{			return display.tabChildren;		}				/**		 * @private		 */		override public function set tabChildren( enable:Boolean ):void		{			display.tabChildren = enable;		}			//--------------------------------------------------------------------------------	//	// Public Methods	//	//--------------------------------------------------------------------------------						/**		 * Moves the display object to a new position.		 * 		 * @param x		 * @param y		 */				public function move( x:Number, y:Number ):void		{			this.x = x;			this.y = y;		}				/**		 * Resizes the diplay object's widht and height.		 * 		 * @param width		 * @param height		 */				public function resize( width:Number, height:Number ):void		{			this.width = width;			this.height = height;		}					/**		 * Cleans up all listeners added		 */			public function destroy():void		{						var child:DisplayObject;						clearListeners();						for( var i:int = 0; i < numChildren; i++)			{				child = getChildAt( i );								if( child is IDisplay ) IDisplay( child ).destroy();			}		}						/**		 * @inheritDoc		 */			override public function addChild(child:DisplayObject):DisplayObject		{			return display.addChild( child );		}					/**		 * @inheritDoc		 */			override public function addChildAt(child:DisplayObject, index:int):DisplayObject		{			return display.addChildAt( child, index );		}					override public function addEventListener( type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false ):void		{			$addEventListener( type, listener, useCapture, priority, useWeakReference );			registerListener( type, listener, useCapture );		}				/**		 * @inheritDoc		 */			override public function areInaccessibleObjectsUnderPoint( point:Point ):Boolean		{			return display.areInaccessibleObjectsUnderPoint( point );		}				/**		 * @inheritDoc		 */			override public function contains( child:DisplayObject ):Boolean		{			return display.contains( child );		}				/**		 * @inheritDoc		 */				override public function getChildAt(index:int):DisplayObject		{			return display.getChildAt( index );		}				/**		 * @inheritDoc		 */			override public function getChildByName(name:String):DisplayObject		{			return display.getChildByName( name );		}			/**		 * @inheritDoc		 */			override public function getChildIndex(child:DisplayObject):int		{			return display.getChildIndex( child );		}				/**		 * @inheritDoc		 */			override public function getObjectsUnderPoint( point:Point ):Array		{			return display.getObjectsUnderPoint( point );		}				/**		 * @inheritDoc		 */			override public function removeChild(child:DisplayObject):DisplayObject		{			return display.removeChild( child );		}			/**		 * @inheritDoc		 */			override public function removeChildAt(index:int):DisplayObject		{			return display.removeChildAt( index );		}				/**		 * @inheritDoc		 */			override public function removeEventListener( type:String, listener:Function, useCapture:Boolean = false ):void		{			$removeEventListener( type, listener, useCapture );			unregisterListener( type, listener );		}			/**		 * @inheritDoc		 */			override public function setChildIndex(child:DisplayObject, index:int):void		{			display.setChildIndex( child, index );		}			/**		 * @inheritDoc		 */			override public function swapChildren(child1:DisplayObject, child2:DisplayObject):void		{			display.swapChildren( child1, child2 );		}		/**		 * @inheritDoc		 */			override public function swapChildrenAt(index1:int, index2:int):void		{			display.swapChildrenAt( index1, index2 );		}			//--------------------------------------------------------------------------------	//	// Protected Methods	//	//--------------------------------------------------------------------------------						/**		 * Adds the display to the display tree by default		 */		protected function addDisplay():void		{			display = new Sprite();			display.name = "display";						$addChild( display );		}				/**		 * removes all event listeners		 */			protected function clearListeners():void		{			var dict:Dictionary;						for( var type:String in registeredListeners )			{				dict = registeredListeners[type];								for( var listener:Object in dict )				{					removeEventListener( type, listener as Function, dict[listener] );				}			}		   			registeredListeners = new Dictionary();		}				/**		 * Registers listeners so that they can be removed later		 */			protected function registerListener( type:String, listener:Function, useCapture:Boolean = false ):void		{			if( !registeredListeners[type] ) registeredListeners[type] = new Dictionary();			if( !registeredListeners[type][listener] ) registeredListeners[type][listener as Function] = useCapture;			}				/**		 * Unregisters listeners		 */			protected function unregisterListener( type:String, listener:Function ):void		{			try{ delete registeredListeners[type][listener]; }catch( error:Error){};						for( var i:String in registeredListeners[type] ){ return; }						try{ delete registeredListeners[type]; }catch( error:Error ){};		}	}}